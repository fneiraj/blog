---
import { LOCALE, SITE } from "@config";
import "@styles/base.css";
import { ViewTransitions } from "astro:transitions";
import Header from "@components/header/Header.astro";
import Footer from "@components/footer/Footer.astro";

const googleSiteVerification = import.meta.env.PUBLIC_GOOGLE_SITE_VERIFICATION;

export interface Props {
  title?: string;
  author?: string;
  description?: string;
  ogImage?: string;
  canonicalURL?: string;
  pubDatetime?: Date;
  modDatetime?: Date | null;
  scrollSmooth?: boolean;
}

const {
  title = SITE.title,
  author = SITE.author,
  description = SITE.desc,
  ogImage = SITE.ogImage,
  canonicalURL = new URL(Astro.url.pathname, Astro.site).href,
  pubDatetime,
  modDatetime,
  scrollSmooth = false,
} = Astro.props;

const socialImageURL = new URL(
  ogImage ?? SITE.ogImage ?? "og.png",
  Astro.url.origin,
).href;

const structuredData = {
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  headline: `${title}`,
  image: `${socialImageURL}`,
  ...(pubDatetime && { datePublished: `${pubDatetime?.toISOString()}}` }),
  ...(modDatetime && { dateModified: modDatetime.toISOString() }),
  author: [
    {
      "@type": "Person",
      name: `${author}`,
      url: SITE.website,
    },
  ],
};

const getActiveURL = () => {
  const currentURL = Astro.url.pathname;
  if (currentURL === "/") {
    return "home";
  }

  if (currentURL.startsWith("/blog") || currentURL.startsWith("/posts")) {
    return "blog";
  }

  if (currentURL.startsWith("/snippets")) {
    return "snippets";
  }

  if (currentURL.startsWith("/projects")) {
    return "projects";
  }

  return undefined;
};

const activeURL = getActiveURL();
---

<!doctype html>
<html lang=`${LOCALE.lang ?? "en"}` class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <title>{title}</title>
    <!--  <script is:inline src="/toggle-theme.js" defer></script>-->

    <link
      rel="preload"
      href="/fonts/Space_Grotesk.woff2"
      as="font"
      crossorigin
      type="font/woff2"
    />

    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="canonical" href={canonicalURL} />
    <meta name="generator" content={Astro.generator} />

    <!-- Sitemap -->
    <link rel="sitemap" href="/sitemap-index.xml" />

    <!-- General Meta Tags -->
    <meta name="title" content={title} />
    <meta name="description" content={description} />
    <meta name="author" content={author} />
    <link rel="sitemap" href="/sitemap-index.xml" />

    <!-- Open Graph / Facebook -->
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:image" content={socialImageURL} />

    <!-- Article Published/Modified time -->
    {
      pubDatetime && (
        <meta
          property="article:published_time"
          content={pubDatetime.toISOString()}
        />
      )
    }
    {
      modDatetime && (
        <meta
          property="article:modified_time"
          content={modDatetime.toISOString()}
        />
      )
    }

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonicalURL} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={socialImageURL} />

    <meta name="theme-color" content="" />

    {
      // If PUBLIC_GOOGLE_SITE_VERIFICATION is set in the environment variable,
      // include google-site-verification tag in the heading
      // Learn more: https://support.google.com/webmasters/answer/9008080#meta_tag_verification&zippy=%2Chtml-tag
      googleSiteVerification && (
        <meta
          name="google-site-verification"
          content={googleSiteVerification}
        />
      )
    }

    <!-- Google JSON-LD Structured data -->
    <script
      type="application/ld+json"
      set:html={JSON.stringify(structuredData)}
    />

    <ViewTransitions />
    <!--<script src="https://cdn.jsdelivr.net/npm/mermaid@10.8.0/dist/mermaid.min.js"></script>-->
  </head>
  <body
    class="bg-slate-50 text-black antialiased dark:bg-gray-950 dark:text-white"
  >
    <Header activeNav={activeURL} />
    <div
      id="main_content"
      class="mx-auto max-w-3xl px-4 sm:px-6 xl:max-w-7xl xl:px-0"
    >
      <div class="flex h-fit flex-col justify-between font-sans">
        <main class="mb-auto pt-6">
          <slot />
        </main>
      </div>
      <Footer />
    </div>
  </body><script>
    const primaryColorScheme = ""; // "light" | "dark"

    // Get theme data from local storage
    const currentTheme = localStorage.getItem("theme");

    function getPreferTheme() {
      // return theme value in local storage if it is set
      if (currentTheme) return currentTheme;

      // return primary color scheme if it is set
      if (primaryColorScheme) return primaryColorScheme;

      // return user device's prefer color scheme
      return window.matchMedia("(prefers-color-scheme: dark)").matches
        ? "dark"
        : "light";
    }

    let themeValue = getPreferTheme();

    function setPreference() {
      localStorage.setItem("theme", themeValue);
      reflectPreference();
    }

    function changeGiscusTheme() {
      function sendMessage(message) {
        const iframe = document.querySelector("iframe.giscus-frame");
        if (!iframe) return;
        iframe.contentWindow.postMessage(
          { giscus: message },
          "https://giscus.app",
        );
      }

      sendMessage({
        setConfig: {
          theme: themeValue,
        },
      });
    }

    function reflectPreference() {
      document.firstElementChild.setAttribute("data-theme", themeValue);

      document
        .querySelector("#theme-btn")
        ?.setAttribute("aria-label", themeValue);

      // Get a reference to the body element
      const body = document.body;

      // Check if the body element exists before using getComputedStyle
      if (body) {
        // Get the computed styles for the body element
        const computedStyles = window.getComputedStyle(body);

        // Get the background color property
        const bgColor = computedStyles.backgroundColor;

        // Set the background color in <meta theme-color ... />
        document
          .querySelector("meta[name='theme-color']")
          ?.setAttribute("content", bgColor);
      }

      changeGiscusTheme();
    }

    // set early so no page flashes / CSS is made aware
    reflectPreference();

    window.onload = () => {
      function setThemeFeature() {
        // set on load so screen readers can get the latest value on the button
        reflectPreference();

        // now this script can find and listen for clicks on the control
        document.querySelector("#theme-btn")?.addEventListener("click", () => {
          themeValue = themeValue === "light" ? "dark" : "light";
          setPreference();
        });
      }

      setThemeFeature();

      // Runs on view transitions navigation
      document.addEventListener("astro:after-swap", setThemeFeature);
    };

    // sync with system changes
    window
      .matchMedia("(prefers-color-scheme: dark)")
      .addEventListener("change", ({ matches: isDark }) => {
        themeValue = isDark ? "dark" : "light";
        setPreference();
      });
  </script>
</html>
