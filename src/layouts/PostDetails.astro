---
import type { CollectionEntry } from "astro:content";
import { SITE } from "@config";
import Layout from "@layouts/Layout.astro";
import Toc from "@components/toc/Toc.astro";
import Header from "@components/posts/Header.astro";
import MainContent from "@components/posts/MainContent.astro";
import Footer from "@components/posts/Footer.astro";
//import Giscus from "@components/posts/Giscus.tsx";
import RelatedPosts from "@components/posts/RelatedPosts.astro";
import ScrollTopAndComments from "@components/posts/ScrollTopAndComments.astro";
import { slugifyStr } from "@utils/slugify";

export interface Props {
  post: CollectionEntry<"blog">;
  prevPost: CollectionEntry<"blog">;
  nextPost: CollectionEntry<"blog">;
  relatedPosts: CollectionEntry<"blog">[];
}

const { post, prevPost, nextPost, relatedPosts } = Astro.props;

const { data, slug } = post;

const {
  title,
  author,
  description,
  ogImage,
  canonicalURL,
  pubDatetime,
  modDatetime,
  tags,
  disableToc,
} = data;

const {
  Content,
  headings,
  remarkPluginFrontmatter: { minutesRead },
} = await post.render();

const ogImageUrl = typeof ogImage === "string" ? ogImage : ogImage?.src;
const ogUrl = new URL(
  ogImageUrl ?? `/posts/${slugifyStr(slug)}.png`,
  Astro.url.origin,
).href;

const layoutProps = {
  title: `${title} | ${SITE.title}`,
  author,
  description,
  pubDatetime,
  modDatetime,
  canonicalURL,
  ogImage: ogUrl,
  scrollSmooth: true,
};

const date = pubDatetime;
---

<Layout {...layoutProps}>
  <section class="mx-auto max-w-34xl px-4 sm:px-6 xl:max-w-9xl xl:px-0">
    <ScrollTopAndComments />
    <div class="justify-center py-5 lg:flex">
      <article class="py-5 mr-4 lg:w-2/3">
        <div>
          <Header {slug} {title} {tags} {date} {minutesRead} />
          <div
            class="grid-rows-[auto_1fr] divide-y divide-gray-200 pb-8 dark:divide-gray-700 xl:divide-y-0"
          >
            <MainContent {Content} />
            {relatedPosts && <RelatedPosts {relatedPosts} />}
            {/*<Giscus client:only />*/}
            <Footer {nextPost} {prevPost} />
          </div>
        </div>
      </article>
      {!disableToc && headings.length > 0 && <Toc toc={headings} />}
    </div>
  </section>
</Layout>

<script is:inline>
  function createProgressBar() {
    const progressContainer = document.createElement("div");
    progressContainer.className =
      "progress-container fixed top-0 z-10 h-1 w-full bg-skin-fill";

    const progressBar = document.createElement("div");
    progressBar.className = "progress-bar h-1 w-0 bg-primary-500";
    progressBar.id = "progress-bar";

    progressContainer.appendChild(progressBar);

    document.body.appendChild(progressContainer);
  }
  createProgressBar();

  function updateScrollProgress() {
    const winScroll =
      document.body.scrollTop || document.documentElement.scrollTop;
    const height =
      document.documentElement.scrollHeight -
      document.documentElement.clientHeight;
    const scrolled = (winScroll / height) * 100;
    if (document) {
      const progressBar = document.getElementById("progress-bar");
      if (progressBar) {
        progressBar.style.width = scrolled + "%";
      }
    }
  }
  document.addEventListener("scroll", updateScrollProgress);

  const fetchPostInfo = async () => {
    const encodedPath = window.location.pathname.replace("/posts", "");

    return await fetch(`/api/posts/${encodedPath}`)
      .then((res) => res.json())
      .then((data) => data);
  };

  const { views } = await fetchPostInfo();

  const viewsCount = document.getElementById("viewsCount");

  if (viewsCount) {
    viewsCount.textContent = `${views} views`;
  }
</script>
